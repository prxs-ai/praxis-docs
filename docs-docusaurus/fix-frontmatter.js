const fs = require('fs-extra');
const path = require('path');
const glob = require('glob');

async function fixFrontmatter() {
  console.log('üîß Fixing frontmatter in all markdown files...');
  
  const files = glob.sync('docs/**/*.md', { cwd: '.' });
  
  for (const file of files) {
    try {
      const content = await fs.readFile(file, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ frontmatter
      if (content.startsWith('---')) {
        const lines = content.split('\n');
        let frontmatterEnd = -1;
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü frontmatter
        for (let i = 1; i < lines.length; i++) {
          if (lines[i] === '---') {
            frontmatterEnd = i;
            break;
          }
        }
        
        if (frontmatterEnd > 0) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º frontmatter –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
          const frontmatterLines = lines.slice(1, frontmatterEnd);
          const contentLines = lines.slice(frontmatterEnd + 1);
          
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º title
          let fixedFrontmatter = [];
          for (const line of frontmatterLines) {
            if (line.startsWith('title:')) {
              const title = line.substring(6).trim();
              // –ï—Å–ª–∏ title –Ω–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞–∫–ª—é—á–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏
              if (!title.startsWith('"') && !title.startsWith("'")) {
                fixedFrontmatter.push(`title: "${title}"`);
              } else {
                fixedFrontmatter.push(line);
              }
            } else {
              fixedFrontmatter.push(line);
            }
          }
          
          // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
          const fixedContent = [
            '---',
            ...fixedFrontmatter,
            '---',
            ...contentLines
          ].join('\n');
          
          await fs.writeFile(file, fixedContent);
          console.log(`‚úÖ Fixed: ${file}`);
        }
      }
    } catch (error) {
      console.error(`‚ùå Error fixing ${file}:`, error.message);
    }
  }
  
  console.log('üéâ Frontmatter fix completed!');
}

fixFrontmatter().catch(console.error);